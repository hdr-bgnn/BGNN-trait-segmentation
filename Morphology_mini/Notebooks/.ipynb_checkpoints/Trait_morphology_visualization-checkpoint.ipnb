{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Tool to visualize a fish segmentation and choose different morpholical parameters\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# import the differente library\n",
    "import os\n",
    "import sys\n",
    "import numpy as np\n",
    "from PIL import Image\n",
    "from skimage.measure import label, regionprops, regionprops_table\n",
    "from math import sqrt\n",
    "import json\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Import and convert the segmentation png into 12 channels"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create dictionnary to convert between trait category and channels and color\n",
    "\n",
    "trait_list = [\"background\", \"dorsal_fin\", \"adipos_fin\", \"caudal_fin\", \"anal_fin\", \"pelvic_fin\", \"pectoral_fin\",\n",
    "              \"head\", \"eye\", \"caudal_fin_ray\", \"alt_fin_ray\", \"alf_fine_spine\", \"trunk\"]\n",
    "\n",
    "color_list = [np.array([0, 0, 0]), np.array([254, 0, 0]),\n",
    "              np.array([0, 254, 0]), np.array([0, 0, 254]),\n",
    "              np.array([254, 254, 0]), np.array([0, 254, 254]),\n",
    "              np.array([254, 0, 254]), np.array([254, 254, 254]),\n",
    "              np.array([0, 254, 102]), np.array([254, 102, 102]),\n",
    "              np.array([254, 102, 204]), np.array([254, 204, 102]),\n",
    "              np.array([0, 124, 124])]\n",
    "\n",
    "# Create dictionnaries to go from channel to color or from trait to color\n",
    "channel_color_dict = {i: j for i, j in enumerate(color_list)}\n",
    "trait_color_dict = dict(zip(trait_list, color_list))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (<ipython-input-4-052059b2b95a>, line 2)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-4-052059b2b95a>\"\u001b[0;36m, line \u001b[0;32m2\u001b[0m\n\u001b[0;31m    image_path =\u001b[0m\n\u001b[0m                 ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "# choose the different file\n",
    "image_path =\n",
    "metadata_file = "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (<ipython-input-8-1a45403301b6>, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-8-1a45403301b6>\"\u001b[0;36m, line \u001b[0;32m1\u001b[0m\n\u001b[0;31m    ls ../\u001b[0m\n\u001b[0m        ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def import_segmented_image(image_path):\n",
    "    '''\n",
    "    import the image from \"image_path\" and convert to np.array astype uint8 (0-255)\n",
    "\n",
    "    '''\n",
    "    img = Image.open(image_path)\n",
    "    img_arr = np.array(img, dtype=np.uint8)\n",
    "\n",
    "    return img_arr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# import the image into array\n",
    "img = import_segmented_image(image_path)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_one_trait_mask(img, trait_color_dict, trait_key):\n",
    "    '''\n",
    "    Create a mask for a trait define by \"trait_key\" using \"img\" (the image array)\n",
    "    and trait_color_dict (the trait to color dictionnary) \n",
    "\n",
    "    '''\n",
    "    color_array = trait_color_dict[trait_key]\n",
    "    trait_mask = (img[:, :, 0] == color_array[0]) & (\n",
    "        img[:, :, 1] == color_array[1]) & (img[:, :, 2] == color_array[2])\n",
    "\n",
    "    return trait_mask"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "trait_mask = get_one_trait_mask(img, trait_color_dict, \"head\")\n",
    "plt.imshow(trait_mask)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
